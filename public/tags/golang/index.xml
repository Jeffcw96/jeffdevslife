<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Jeff&#39;s Blog</title>
    <link>https://jeffdevslife.com/tags/golang/</link>
    <description>Recent content in golang on Jeff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2020, Jeff&#39;s all rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeffdevslife.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>REST API with Go</title>
      <link>https://jeffdevslife.com/post/restapi-with-golang/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/restapi-with-golang/</guid>
      <description>In this article, we are going to build a simple restful service with Golang by using Gorilla Mux package.
Prerequisites:  Before everything started. Please make sure you have installed GO and set as your environment variable.. It would be better if you already understand how to create a simple web server with GO.  We will be covered 4 common HTTP methods in our REST API as well as the testing tool for testing each endpoints</description>
    </item>
    
    <item>
      <title>Redis List</title>
      <link>https://jeffdevslife.com/post/redis-list/</link>
      <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/redis-list/</guid>
      <description>Redis Lists are simply lists of strings, sorted by insertion order. It is possible to add elements to a Redis List pushing new elements on the head (LPUSH) or on the tail (RPUSH) of the list.
We will be covered few basic commands for this List data type. We also will use the go-redis package for some having some example code wrriten in Golang.
 LRANGE LPUSH LPOP RPUSH RPOP LSET  Setup and connect redis server in Golang 1var Client = redis.</description>
    </item>
    
    <item>
      <title>Redis Hash</title>
      <link>https://jeffdevslife.com/post/redis-hash/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/redis-hash/</guid>
      <description>Redis Hashes are maps between string fields and string values (key-value pair), so they are the perfect data type to represent objects.
It will be useful for store multiple data that come from an object such as Customer and inside Customer object we have their Name, Age, Address and other info.
Because Redis isn&amp;rsquo;t like some of the SQL or NO-SQL languages that will auto generate ID when we create the instance or model.</description>
    </item>
    
    <item>
      <title>Passing JSON from Front-end to Backend</title>
      <link>https://jeffdevslife.com/post/json/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/json/</guid>
      <description>In this article, we will be passing json data from browser to our backend server. We will then use GO to handle the data that send from front end. There are few things that you might interested to know before you start following this tutorial which is send data via Fetch API and Backend Server with Golang.
I also use back and modified the previous layout for this example and serve in 127.</description>
    </item>
    
    <item>
      <title>Build Your Backend Server with GOLANG</title>
      <link>https://jeffdevslife.com/post/setup-go-server/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/setup-go-server/</guid>
      <description>&lt;p&gt;Want to build a web server but don&amp;rsquo;t know how to start ?? We will be showing a step by step procedure from installation to configuration of server by using &lt;a href=&#34;https://github.com/gorilla/mux&#34;&gt;Gorilla Mux Library&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>