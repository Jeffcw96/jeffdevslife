<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jeff&#39;s Blog</title>
    <link>https://jeffdevslife.com/post/</link>
    <description>Recent content in Posts on Jeff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2020, Jeff&#39;s all rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeffdevslife.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>REST API with Go</title>
      <link>https://jeffdevslife.com/post/restapi-with-golang/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/restapi-with-golang/</guid>
      <description>In this article, we are going to build a simple restful service with Golang by using Gorilla Mux package.
Prerequisites:  Before everything started. Please make sure you have installed GO and set as your environment variable.. It would be better if you already understand how to create a simple web server with GO.  We will be covered 4 common HTTP methods in our REST API as well as the testing tool for testing each endpoints</description>
    </item>
    
    <item>
      <title>How to center a DOM element</title>
      <link>https://jeffdevslife.com/post/center-element/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/center-element/</guid>
      <description>&lt;p&gt;Center an element sometimes can be very confusing. It can be center horizontally, center vertically or center both horizontally and vertically in the same time. In this article, we will be discussed different methods to center the element in different situation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis List</title>
      <link>https://jeffdevslife.com/post/redis-list/</link>
      <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/redis-list/</guid>
      <description>Redis Lists are simply lists of strings, sorted by insertion order. It is possible to add elements to a Redis List pushing new elements on the head (LPUSH) or on the tail (RPUSH) of the list.
We will be covered few basic commands for this List data type. We also will use the go-redis package for some having some example code wrriten in Golang.
 LRANGE LPUSH LPOP RPUSH RPOP LSET  Setup and connect redis server in Golang 1var Client = redis.</description>
    </item>
    
    <item>
      <title>HashMap</title>
      <link>https://jeffdevslife.com/post/hash-map/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/hash-map/</guid>
      <description>&lt;p&gt;Have you ever encountering the issue of long processing time by iterating an array using nested for loop? If yes, &lt;strong&gt;Hashmap(Map)&lt;/strong&gt; might be a good alternative choice to achieve the better result. Javascript itself comes with Hashmaps data structure that can organize and arrange the data into key-value pairs. They are organized as linked list in the sense that it remembers the original insertion order of the keys&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Async Await</title>
      <link>https://jeffdevslife.com/post/async-await/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/async-await/</guid>
      <description>&lt;p&gt;Async/Await is another way to write asynchronous code in much easier and cleaner way to read. In this article, you will learn how you can simplify and transform your your callback or Promise code into Async/Await way.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis Hash</title>
      <link>https://jeffdevslife.com/post/redis-hash/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/redis-hash/</guid>
      <description>Redis Hashes are maps between string fields and string values (key-value pair), so they are the perfect data type to represent objects.
It will be useful for store multiple data that come from an object such as Customer and inside Customer object we have their Name, Age, Address and other info.
Because Redis isn&amp;rsquo;t like some of the SQL or NO-SQL languages that will auto generate ID when we create the instance or model.</description>
    </item>
    
    <item>
      <title>Promise</title>
      <link>https://jeffdevslife.com/post/promise/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/promise/</guid>
      <description>Javascript is a single-threaded programming language in the sense that it can only process one statement or only one thing can happen at a time. However, when we have a large scale data coming from API. The program might just stop and wait until the data is fully received from the end point even there are bunch of pending code waiting to be executed right after the request.
This is where asynchoronous Javascript comes into play.</description>
    </item>
    
    <item>
      <title>ES6 Destructuring Array and Object</title>
      <link>https://jeffdevslife.com/post/destructuring-array-object/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/destructuring-array-object/</guid>
      <description>&lt;p&gt;Destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Passing JSON from Front-end to Backend</title>
      <link>https://jeffdevslife.com/post/json/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/json/</guid>
      <description>In this article, we will be passing json data from browser to our backend server. We will then use GO to handle the data that send from front end. There are few things that you might interested to know before you start following this tutorial which is send data via Fetch API and Backend Server with Golang.
I also use back and modified the previous layout for this example and serve in 127.</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://jeffdevslife.com/post/cookie/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/cookie/</guid>
      <description>Cookies are usually small text files, given ID tags that are stored on your computer&amp;rsquo;s browser directory or program data subfolders.
It usually used to recognize your computer when you visit the website, analyze the use of website, track you navigate the website and enable the use of e-commerce facilities such as affiliate marketing
Set Cookie This code will set and store a cookie (key = firstCookie, value = OK) in our browser 1document.</description>
    </item>
    
    <item>
      <title>Binary Search Tree</title>
      <link>https://jeffdevslife.com/post/binary-search-tree/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/binary-search-tree/</guid>
      <description>Unlike array or linked list which are linear, Binary Search Tree (BST) is constructed in a non-linear form.
Each element inside the BST is called node. It has 2 information from the node which are the current value and pointer that pointing to the next node or their child node. Usually the very first node is known as ROOT and the following will be child node.
There are some rules about this algorithm that is the node pointing from left will be the smaller value node while the node pointing from the right will be the larger value node.</description>
    </item>
    
    <item>
      <title>XMLHttpRequest vs Fetch API</title>
      <link>https://jeffdevslife.com/post/xhr-fetch/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/xhr-fetch/</guid>
      <description>In this article, we will have a simple comparison on the XMLHttpRequest code and Fetch API code.
XMLHttpRequest(XHR) objects are used to interact with servers, it uses the concept of AJAX where we can retrieve the data from a URL or backend without having to do a full-page refresh.
In this case, I will be using JSON object as my Request Payload. It&amp;rsquo;s gonna something like this. 1var jsonObj = {}; 2jsonObj.</description>
    </item>
    
    <item>
      <title>Password Strength Detector</title>
      <link>https://jeffdevslife.com/post/password-detector/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/password-detector/</guid>
      <description>&lt;p&gt;In this article, we will create an interative password input and use Regular Expression for validation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Build Your Backend Server with GOLANG</title>
      <link>https://jeffdevslife.com/post/setup-go-server/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/setup-go-server/</guid>
      <description>&lt;p&gt;Want to build a web server but don&amp;rsquo;t know how to start ?? We will be showing a step by step procedure from installation to configuration of server by using &lt;a href=&#34;https://github.com/gorilla/mux&#34;&gt;Gorilla Mux Library&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Setup Redis On Window</title>
      <link>https://jeffdevslife.com/post/setup-redis/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeffdevslife.com/post/setup-redis/</guid>
      <description>&lt;p&gt;In this article, we will show how to install and configure Redis on Window, We will be setting up the redis server, install Redis Desktop Manager as GUI&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>